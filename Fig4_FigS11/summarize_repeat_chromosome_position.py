#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This script summarize repeat on chromosomes by contig order on chromosomes. 100kb of Ns are added between two adjacent contigs.
It generate input for plotting in R.
@author: Xiaolu Wei (xiaolu_wei@urmc.rochester.edu)
"""

"""
set centromere middle point site as 0
"""

#set which chromosome to be focused on
chromosome='2'

#contig order on chromosomes
if chromosome=='2':
    cen='tig00057289'
    contigs=['2L_1','2L_2','tig00057289','Contig142','Rsp_2','2R_16','2R_18','2R_19','2R_20','2R_21']

elif chromosome=='3':
    cen='3R_5'
    contigs=['3L_1','3L_3','3L_4','3L_5','3L_8','3L_10','3R_1','3R_2','3R_3','3R_4','3R_5','tig00022795','id=67822_0','3R_6','3R_8','3R_9','3R_10','Contig11','Contig145','3_scaffold1','3_scaffold2','3R_28']

elif chromosome=='4':
    cen='Contig119'
    contigs=['Contig119','4_2']

elif chromosome=='X':
    cen='Contig79'
    contigs=['X_1','Contig5','X_2','X_3','X_7','X_9','Contig135','X_10','X3X4_6_D1712_2','Contig95','Contig79']

elif chromosome=='Y':
    cen='Y_Contig26'
    contigs=['Y_scaffold6','Y_scaffold7','Y_scaffold4','Y_Contig140','Y_Contig143','Y_Contig10','Y_Contig104','Y_Contig6','Y_Contig2','Y_Contig26','Y_scaffold5','Y_scaffold3']

else:
    print ("unknow chromosome name")

#contigs which are reversed in the assembly
reverse_contigs=['2L_2','2R_contig_19','3L_4','3R_5','3_scaffold1','Contig5','Y_scaffold7','Y_Contig10','Y_Contig104']

#size file which contains information of contig sizes
sizefile="dmel_scaffold2_plus0310.sizes"
#repeat elements which we wnat to plot
elements=['G2','Jockey-3','G6','G','DOC2','R1','Jockey-1','BARI','PROTOP','TAHRE','HETA','TART']
#y value of each element
values=[1,1,2,3,4,5,6,7,8,9,10,11]
#input file generated by â€œsummarize_repeat_chromosome_position.sh"
infile="chromosome"+chromosome+".summary"
#output file
outfile="chromosome"+chromosome+"_format_G2J3combined.summary"


# get size and location of centromere
size=[]
with open (sizefile,'r') as sfile:
    lines=sfile.readlines()
    for i in range(len(contigs)):
        for line in lines:
            line=line.strip('\n')
            if line.split('\t',)[0] == contigs[i]:
                size.append(int(line.split('\t',)[1]))

cen_pos=0
i=contigs.index(cen)
for j in range(i):
    cen_pos+=size[(j)]+100000 
cen_pos+=int(0.5*size[i])
#print (cen_pos)
    
#assign y value to repeat elements            
yvalue={}
for item in elements:
    index=elements.index(item)
    yvalue[item]=values[index]

with open (outfile,'w') as ofile:
    ofile.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" %('value','element','chromosome','position_chro','position_cen','contig','position_contig','full'))
    with open(infile,'r') as ifile:
        lines=ifile.readlines()
        for line in lines:            
            line=line.strip('\n')
            info=line.split('\t',) 
            name=info[0]
            #continuous position info in chromosome
            contig=info[1]
            if contig in contigs:
                i=contigs.index(contig)
                #pos in contig
                if contig in reverse_contigs:
                    pos=size[i]-int(info[2])
                    #print (contig+": "+info[2]+" - "+str(pos))
                else:
                    pos=int(info[2])
                for j in range(i):
                    #pos in chromosome, set left end=0, assum each contig are 100kb apart
                    pos+=size[j]+100000
                #pos in chromosome, set middle centromere=0, assum each contig are 100kb apart 
                pos_c=pos-cen_pos
                #y value
                y=yvalue[name]               
                # full length            
                if info[3]=='full':
                    full='full'
                else:
                    full='truncated'
                
                #combine G2,Jockey-3
                if name in ['G2','Jockey-3']:
                    name='G2/Jockey-3'
                
                ofile.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" %(y,name,chromosome,str(pos),str(pos_c),info[1],info[2],full))
            else:
                print("unknown contig: "+contig)

            
